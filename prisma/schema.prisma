generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String        @id @default(uuid())
  role              Role
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  email             String        @unique
  active            Boolean       @default(true)
  clerkId           String        @unique
  profilePictureUrl String?
  description       String?
  company           Company?
  extra             Extra?
  userLocation      UserLocation?
  assignedMissions  UserMission[]

  @@index([email])
  @@index([clerkId])
}

model Extra {
  id                  String            @id @default(uuid())
  userId              String            @unique
  first_name          String
  last_name           String
  birthdateIso        String            @default("")
  phone               String?
  missionJobs         ExtraMissionJob[]
  max_travel_distance Int
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id     String @id @default(uuid())
  userId String @unique

  // Phase 1 - Informations basiques
  company_name        String // Raison sociale (déjà existant)
  siret               String              @unique
  businessSector      BusinessSector // Secteur d'activité
  collectiveAgreement CollectiveAgreement // Convention collective

  // Adresses
  headOfficeAddress String // Adresse du siège social
  billingAddress    String? // Adresse de facturation (optionnelle)

  // Contact
  company_phone String?

  // Représentant légal
  contactFirstName            String // Prénom du contact (déjà existant, à renommer potentiellement)
  contactLastName             String // Nom du contact (déjà existant, à renommer potentiellement)
  legalRepresentativeFunction LegalRepresentativeFunction // Fonction du représentant légal

  // Phase 2 - Informations administratives (collectées au moment de la première création d'une mission)
  urssafId         String? // Numéro URSSAF/identifiant employeur
  retirementFund   RetirementFund? // Caisse de retraite complémentaire
  providentFund    ProvidentFund? // Organisme de prévoyance
  insuranceDetails String? // Mentions relatives à l'assurance

  // Autres
  logoId           String? // ID du logo (déjà existant)
  profileCompleted Boolean @default(false) // Indique si le profil est complet passé à True lors de la phase 2

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdMissions Mission[]
}

model RequiredPosition {
  id        String     @id @default(uuid())
  missionId String
  jobType   MissionJob
  quantity  Int
  mission   Mission    @relation(fields: [missionId], references: [id])

  @@unique([missionId, jobType])
}

model Mission {
  id                String             @id @default(uuid())
  name              String
  description       String?
  additionalInfo    String?
  missionStartDate  DateTime
  missionEndDate    DateTime
  creatorId         String
  missionLocationId String?
  creator           Company            @relation(fields: [creatorId], references: [id])
  missionLocation   MissionLocation?   @relation(fields: [missionLocationId], references: [id])
  requiredPositions RequiredPosition[]
  employees         UserMission[]
  status            MissionStatus      @default(pending)
  invitations       Invitation[]

  @@index([creatorId])
  @@index([status])
}

model UserLocation {
  lat      String  @default("")
  lon      String  @default("")
  fullName String
  userId   String? @unique
  id       String  @id @default(uuid())
  user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MissionLocation {
  lat      Float
  lon      Float
  fullName String
  id       String    @id @default(uuid())
  mission  Mission[]

  @@unique([lat, lon])
}

model UserMission {
  id               String            @id @default(uuid())
  userId           String
  missionId        String
  missionStartDate DateTime
  missionEndDate   DateTime
  missionJob       MissionJob
  hourlyRate       Float
  createdAt        DateTime          @default(now())
  status           UserMissionStatus
  updatedAt        DateTime          @updatedAt
  mission          Mission           @relation(fields: [missionId], references: [id])
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, missionId])
}

model Invitation {
  id               String            @id @default(uuid())
  email            String
  missionId        String
  missionStartDate DateTime
  missionEndDate   DateTime
  missionJob       MissionJob
  hourlyRate       Float
  status           UserMissionStatus @default(pending)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  mission          Mission           @relation(fields: [missionId], references: [id])

  @@unique([email, missionId])
  @@index([email])
}

model BlogPost {
  id           String        @id @default(uuid())
  title        String
  content      String
  published    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  authorName   String        @default("Cet Extra")
  shortDesc    String        @default("")
  keywords     String[]
  emailSubject String        @default("Cet Extra") @map("email_subject")
  shortUrl     String        @unique @default("")
  comments     BlogComment[]
}

model BlogComment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  postId    String
  author    String
  post      BlogPost @relation(fields: [postId], references: [id])
}

model BlogSubscriber {
  id         String   @id @default(uuid())
  email      String   @unique
  subscribed Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([email])
}

model ExtraMissionJob {
  id         String     @id @default(uuid())
  extraId    String
  missionJob MissionJob
  experience Int
  extra      Extra      @relation(fields: [extraId], references: [id], onDelete: Cascade)

  @@unique([extraId, missionJob])
}

enum MissionJob {
  waiter
  chefDeRang
  maitreHotel
  commisSalle
  runner
  bartender
  sommelier
  host
  diningManager
  cook
  chefDePartie
  commisKitchen
  sousChef
  dishwasher
  pastryChef
}

enum Role {
  extra
  company
}

enum UserMissionStatus {
  pending
  accepted
  refused
  cancelled
}

enum MissionStatus {
  pending
  active
  completed
  cancelled
}

// Secteur d'activité
enum BusinessSector {
  TRAITEUR
  ORGANISATEUR_EVENEMENTS
  SALLE_RECEPTION
  RESTAURANT
  HOTEL
  CAFE
  BAR
  DISCOTEQUE
  CASINO
  CAMPING
  AUTRE
}

// Convention collective
enum CollectiveAgreement {
  HCR
  SYNTEC
  EVENEMENTIEL
  AUDIOVISUEL
  SPORT
  ANIMATION
  TOURISME
  AUTRE
}

// Fonds de retraite
enum RetirementFund {
  AGIRC_ARRCO
  IRCANTEC
  CARCDSF
  CIPAV
  AUTRE
}

// Prévoyance santé
enum ProvidentFund {
  AG2R
  MALAKOFF_HUMANIS
  APICIL
  PRO_BTP
  KLESIA
  AUDIENS
  AUTRE
}

// Représentant légal
enum LegalRepresentativeFunction {
  GERANT
  PRESIDENT
  DIRECTEUR_GENERAL
  ADMINISTRATEUR
  ASSOCIE
  MANDATAIRE
  AUTRE
}
