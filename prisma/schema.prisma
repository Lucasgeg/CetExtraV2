// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id               String        @id @default(uuid())
  clerkId          String        @unique
  role             Role
  email            String        @unique
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  userLocation     UserLocation?
  active           Boolean       @default(true)
  assignedMissions UserMission[]
  extra            Extra?
  company          Company?
}

model Extra {
  id                  String     @id @default(uuid())
  user                User       @relation(fields: [userId], references: [id])
  userId              String     @unique
  first_name          String
  last_name           String
  birthdate           DateTime
  phone               String?
  missionJob          MissionJob @default(waiter)
  max_travel_distance Int
}

model Company {
  id               String    @id @default(uuid())
  user             User      @relation(fields: [userId], references: [id])
  userId           String    @unique
  company_name     String
  contactFirstName String
  contactLastName  String
  logoId           String?
  company_phone    String?
  createdMissions  Mission[]
}

model Mission {
  id                String           @id @default(uuid())
  name              String
  description       String?
  missionLocation   MissionLocation? @relation(fields: [missionLocationId], references: [id])
  missionLocationId String?          @unique
  mission_date      DateTime
  creator           Company          @relation(fields: [creatorId], references: [id])
  creatorId         String
  employees         UserMission[]
}

model UserLocation {
  id             String  @id @default(uuid())
  lat            Float
  lon            Float
  fullName       String?
  user           User?   @relation(fields: [userLocationId], references: [id], onDelete: Cascade)
  userLocationId String? @unique
  userId         String? @unique
}

model MissionLocation {
  id        String   @id @default(uuid())
  lat       Float
  lon       Float
  fullName  String?
  mission   Mission?
  missionId String   @unique
}

model UserMission {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  mission     Mission    @relation(fields: [missionId], references: [id])
  missionId   String
  start_date  DateTime
  missionJob  MissionJob
  duration    Int
  hourly_rate Float

  @@unique([userId, missionId])
}

enum MissionJob {
  waiter
  cook
  both
}

enum Role {
  extra
  company
}
